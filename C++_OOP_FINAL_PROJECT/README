#Project Name: Traffic Light Controller
Clear description of assigned task
This task involves designing an interactive C++ program that simulates different types of traffic light controllers using object-oriented programming. The program defines a base abstract class TrafficLightController with derived classes like UrbanController, PedestrianController, and CustomController, each managing its own sequence of light states (color and duration). Users are prompted to input how many controllers they want, select the type for each, and if choosing custom enter specific light colors and durations. The program then simulates a number of cycles where each controller displays its current state and transitions to the next. It also allows users to remove controllers dynamically and ensures proper memory management throughout.
Explanation of how task was completed
1. Base Structure (Abstract Class and Inheritance)
The program is built using object-oriented programming (OOP) with a base abstract class:
	TrafficLightController (Abstract Class)
Contains:
State* states: an array of State structures.
numStates: number of light states (like Red, Green, Yellow).
currentState: tracks which light is active.
Has a pure virtual function cycle(), forcing derived classes to implement it.
	State Struct
cpp
CopyEdit
struct State {
    char color[10];
    int duration;
};
Holds the color (like "Red") and the duration (in seconds) for that state.
2. Derived Classes for Controller Types
	UrbanController
Has 3 hardcoded states: Red (60s), Green (45s), Yellow (5s).
      Overrides cycle() to show current light and move to the next state.
	PedestrianController
Has 2 hardcoded states: Red (30s), Green (15s).
       Overrides cycle() like the Urban controller.
	CustomController
Accepts user input for:
Number of states.
Color and duration of each state.
Fully customizable.
Overrides cycle() to behave like the others.
3. Memory Management and Dynamic Controller List
Since controllers are created dynamically, we use a global dynamic array:
cpp
CopyEdit
TrafficLightController** controllers = nullptr;
int controllerCount = 0;
	addController()
Allocates new array with one extra slot.
Copies existing pointers.
Adds new controller.
Cleans up old array.
	removeController(index)
Deletes the controller at a given index.
Copies remaining pointers to a new smaller array.
Cleans up old array.
4. User Interaction (main function)
	Input:
1.	Number of controllers.
2.	For each controller:
          Ask for the type (Urban, Pedestrian, or Custom).
         If Custom: ask for number of states and their color/duration.
3.	Number of cycles to simulate.
4.	Optionally, remove one controller by index.
	Cycle Simulation:
Loops over all controllers and calls their cycle() method to show current state.
Each controller independently cycles to its next light.
	Cleanup:
After simulation, all dynamically allocated controllers are deleted using removeController() inside a loop.
Annotated code with comments detailing the purpose of each line

#include <iostream>      // For input/output operations
#include <cstring>       // For using C-style string functions like strcpy()

using namespace std;

// ---------------------------
// Define the State structure
// ---------------------------
struct State {
    char color[10];      // Color of the light (e.g., "Red", "Green", etc.)
    int duration;        // Duration for which this light is on (in seconds)
};

// ---------------------------------------------
// Abstract Base Class for all traffic controllers
// ---------------------------------------------
class TrafficLightController {
protected:
    State* states;       // Dynamic array of light states
    int numStates;       // Number of states (e.g., 3 for Red, Green, Yellow)
    int currentState;    // Index of the current active state

public:
    // Constructor: initialize number of states and allocate memory
    TrafficLightController(int n) : numStates(n), currentState(0) {
        states = new State[n];
    }

    // Virtual destructor to safely delete dynamic memory
    virtual ~TrafficLightController() {
        delete[] states;
    }

    // Pure virtual function: must be implemented by all derived classes
    virtual void cycle() = 0;
};

// ---------------------------------------------
// Urban Traffic Light Controller (3 fixed states)
// ---------------------------------------------
class UrbanController : public TrafficLightController {
public:
    // Constructor initializes with 3 fixed states
    UrbanController() : TrafficLightController(3) {
        strcpy(states[0].color, "Red");
        states[0].duration = 60;

        strcpy(states[1].color, "Green");
        states[1].duration = 45;

        strcpy(states[2].color, "Yellow");
        states[2].duration = 5;
    }

    // Show current state and move to the next
    void cycle() override {
        cout << "[Urban] Color: " << states[currentState].color
             << ", Duration: " << states[currentState].duration << "s\n";
        currentState = (currentState + 1) % numStates; // Loop back to start
    }
};

// ---------------------------------------------------
// Pedestrian Controller (2 fixed states)
// ---------------------------------------------------
class PedestrianController : public TrafficLightController {
public:
    PedestrianController() : TrafficLightController(2) {
        strcpy(states[0].color, "Red");
        states[0].duration = 30;

        strcpy(states[1].color, "Green");
        states[1].duration = 15;
    }

    void cycle() override {
        cout << "[Pedestrian] Color: " << states[currentState].color
             << ", Duration: " << states[currentState].duration << "s\n";
        currentState = (currentState + 1) % numStates;
    }
};

// ----------------------------------------------------
// Custom Controller: user-defined number of states
// ----------------------------------------------------
class CustomController : public TrafficLightController {
public:
    CustomController(int n) : TrafficLightController(n) {
        for (int i = 0; i < n; ++i) {
            cout << "Enter color for state " << i + 1 << ": ";
            cin >> ws; // Clears any whitespace
            cin.getline(states[i].color, 10); // Input color

            cout << "Enter duration (in seconds) for " << states[i].color << ": ";
            cin >> states[i].duration;
        }
    }

    void cycle() override {
        cout << "[Custom] Color: " << states[currentState].color
             << ", Duration: " << states[currentState].duration << "s\n";
        currentState = (currentState + 1) % numStates;
    }
};

// -----------------------------
// Global controller list setup
// -----------------------------
TrafficLightController** controllers = nullptr; // Dynamic array of controllers
int controllerCount = 0;                        // Number of controllers added

// -----------------------------
// Function to add a controller
// -----------------------------
void addController(TrafficLightController* c) {
    TrafficLightController** temp = new TrafficLightController*[controllerCount + 1];
    
    for (int i = 0; i < controllerCount; ++i) {
        temp[i] = controllers[i]; // Copy existing controllers
    }

    temp[controllerCount++] = c; // Add new controller to the end
    delete[] controllers;        // Delete old array
    controllers = temp;          // Point to new array
}

// -----------------------------
// Function to remove a controller
// -----------------------------
void removeController(int index) {
    if (index < 0 || index >= controllerCount) return; // Out of bounds check

    TrafficLightController** temp = new TrafficLightController*[controllerCount - 1];
    int j = 0;

    for (int i = 0; i < controllerCount; ++i) {
        if (i != index) {
            temp[j++] = controllers[i]; // Copy all except the one to remove
        } else {
            delete controllers[i]; // Free memory of removed controller
        }
    }

    --controllerCount;
    delete[] controllers;
    controllers = temp;
}

// ---------------------------------------------
// Simulate one cycle for all controllers
// ---------------------------------------------
void simulateCycle() {
    for (int i = 0; i < controllerCount; ++i) {
        controllers[i]->cycle();
    }
}

// ---------------------------------------------
// Main program
// ---------------------------------------------
int main() {
    int totalControllers;
    cout << "Enter the number of traffic light controllers to add: ";
    cin >> totalControllers;

    // Loop to create and add each controller
    for (int i = 0; i < totalControllers; ++i) {
        cout << "\n--- Controller " << i + 1 << " ---\n";
        cout << "Select controller type:\n";
        cout << "1. Urban\n";
        cout << "2. Pedestrian\n";
        cout << "3. Custom (user-defined)\n";
        cout << "Enter choice (1-3): ";
        int type;
        cin >> type;

        if (type == 1) {
            addController(new UrbanController());
        } else if (type == 2) {
            addController(new PedestrianController());
        } else if (type == 3) {
            int n;
            cout << "Enter number of states: ";
            cin >> n;
            addController(new CustomController(n));
        } else {
            cout << "Invalid choice. Skipping this controller.\n";
        }
    }

    // Ask user how many cycles to simulate
    int numCycles;
    cout << "\nEnter number of cycles to simulate: ";
    cin >> numCycles;

    // Run simulation
    for (int i = 0; i < numCycles; ++i) {
        cout << "\n=== Cycle " << i + 1 << " ===\n";
        simulateCycle();
    }

    // Optionally remove a controller by index
    char removeOption;
    cout << "\nDo you want to remove any controller? (y/n): ";
    cin >> removeOption;
    if (removeOption == 'y' || removeOption == 'Y') {
        int removeIndex;
        cout << "Enter index of controller to remove (0 to " << controllerCount - 1 << "): ";
        cin >> removeIndex;
        removeController(removeIndex);

        // Run one more cycle after removal
        cout << "\nCycle after removal:\n";
        simulateCycle();
    }

    // Cleanup all controllers at the end
    while (controllerCount > 0) {
        removeController(0);
    }

    cout << "\nAll controllers removed. Program ended.\n";
    return 0;
}






